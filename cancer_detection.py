# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qa3FVhrqtvyJq28j6CmMN0v4tbfXg0_-
"""

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import cv2

# Load Dataset
dataset_dir = '/content/data/'  # Update with your dataset path
categories = ['cancerous', 'non_cancerous']  # Update based on your dataset structure

def load_images(dataset_dir, categories):
    images, labels = [], []
    for category in categories:
        category_path = os.path.join(dataset_dir, category)
        class_label = categories.index(category)
        for img in os.listdir(category_path):
            img_path = os.path.join(category_path, img)
            img_array = cv2.imread(img_path)
            if img_array is not None:
                img_array = cv2.resize(img_array, (224, 224))  # Resize images to 224x224
                images.append(img_array)
                labels.append(class_label)
    return np.array(images), np.array(labels)

images, labels = load_images(dataset_dir, categories)
labels = to_categorical(labels)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

# Data Augmentation
train_datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    preprocessing_function=preprocess_input
)

test_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)

train_generator = train_datagen.flow(X_train, y_train, batch_size=32)
test_generator = test_datagen.flow(X_test, y_test, batch_size=32)

# CNN Model
cnn_model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(2, activation='softmax')
])

cnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train CNN Model
cnn_history = cnn_model.fit(train_generator, validation_data=test_generator, epochs=10)

# Evaluate CNN Model
cnn_loss, cnn_accuracy = cnn_model.evaluate(test_generator)
print(f"CNN Model Accuracy: {cnn_accuracy * 100:.2f}%")

# Transfer Learning with ResNet50
resnet_base = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

resnet_model = Sequential([
    resnet_base,
    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(2, activation='softmax')
])

resnet_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train ResNet50 Model
resnet_history = resnet_model.fit(train_generator, validation_data=test_generator, epochs=10)

# Evaluate ResNet50 Model
resnet_loss, resnet_accuracy = resnet_model.evaluate(test_generator)
print(f"ResNet50 Model Accuracy: {resnet_accuracy * 100:.2f}%")

# Grad-CAM Visualization
def grad_cam(model, img_array, layer_name):
    grad_model = tf.keras.models.Model(
        [model.inputs], [model.get_layer(layer_name).output, model.output]
    )
    with tf.GradientTape() as tape:
        conv_outputs, predictions = grad_model(img_array)
        loss = predictions[:, 1]  # Focus on cancerous class
    grads = tape.gradient(loss, conv_outputs)
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))
    conv_outputs = conv_outputs.numpy()[0]
    pooled_grads = pooled_grads.numpy()
    for i in range(pooled_grads.shape[-1]):
        conv_outputs[:, :, i] *= pooled_grads[i]
    heatmap = np.mean(conv_outputs, axis=-1)
    heatmap = np.maximum(heatmap, 0) / np.max(heatmap)
    return heatmap

# Grad-CAM on a test image
test_image = X_test[0]
test_image_input = np.expand_dims(test_image, axis=0)
heatmap = grad_cam(resnet_model, test_image_input, layer_name='conv5_block3_out')

# Overlay Grad-CAM heatmap
plt.imshow(test_image)
plt.imshow(cv2.resize(heatmap, (224, 224)), cmap='jet', alpha=0.5)
plt.title("Grad-CAM Visualization")
plt.axis('off')
plt.show()